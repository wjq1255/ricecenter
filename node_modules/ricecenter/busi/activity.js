/**
 * Created by hadoop on 2015/6/16.
 */
var async = require('async');
var http = require('http');
var moment = require('moment')

var querystring = require('querystring');
var dbpool = require('../core/dbutil');
var config = require('../core/config')
var logger = require('../core/logger')
var resUtils = require('../core/resUtils');
var timeUtils = require('../core/timeUtils');
var crypto = require('../core/cryptoUtils');
var redisClient = require('../core/redisClient');
var RiceError = require('../core/RiceError')
var httpRequest = require('../core/httpRequest')
var common = require('./common.js')

var activity = {};

var UC_PID = config.UC_PID;
var UC_SECRET = config.UC_SECRET;
var USER_VCODE_RATE_PREFIX = 'STR_WIFI_VCODE_RATE_';
var USER_VCODE_DAY_PREFIX = 'STR_SCHOOL_WIFI_VCODE_';
var CRYPTO_SALT = "www.anzhuoshangdian.com";
var IMG_FILE_SERVER = 'http://imgs.anzhuoshangdian.com';

var PLATFORM = 1;
var BUSI_SKIP = new Error();
var BUSI_EXCEPTION = new Error();
var BREAK_FLAG = BUSI_EXCEPTION;

//var INNER_ERROR = new RiceError(500, '服务器内部错误');

var endResonse = resUtils.endResonse;
var returnjsondata = resUtils.returnjsondata;

var getAngle = function(rank){
    switch (rank)
    {
        case 1:
            return Math.floor(Math.random()*12) + 346;
            break;
        case 2:
            return Math.floor(Math.random()*21) + 285;
            break;
        case 3:
            return Math.floor(Math.random()*21) + 170;
            break;
        case 4:
            return Math.floor(Math.random()*32) + 52;
            break;
        case 5:
            return Math.floor(Math.random()*27) + 128;
            break;
        case 6:
            if(Math.floor(Math.random()*2))
            {
                return Math.floor(Math.random()*46) + 2;
            }
            else
            {
                return Math.floor(Math.random()*46) + 195;
            }
            break;
        default:
            var num = Math.floor(Math.random()*3);
            if(num == 0)
            {
                return Math.floor(Math.random()*36) + 306;
            }
            else if(num == 1)
            {
                return Math.floor(Math.random()*36) + 245;
            }
            else
            {
                return Math.floor(Math.random()*36) + 88;
            }
    }
}


var getConnection = function (context, callback) {
    dbpool.getConnection(function (err, connection) {
        context.conn = connection;
        if (err) {
            logger.getDebugLogger().error("服务器内部错误：" + err);
            connection.release();
            return callback(err);
        }
        connection.beginTransaction(function (err) {
            if (err) {
                logger.getDebugLogger().error("数据库连接异常：" + err);
                connection.release();
                return callback(err);
            }

            return callback(null);

        })
    })
}

var getConnectionExt = function (callback) {
    getConnection(null, callback)
}

var commit = function (connection, endBusi, endBusiWithException) {
    if (connection) {
        connection.commit(function (err) {
            if (err) {
                connection.rollback(function () {
                    connection.release();
                    if (endBusiWithException) {
                        endBusiWithException(err);
                    }
                });
            }
            else
            {
                    connection.release();

                if (endBusi) {
                    endBusi();
                }
            }
        });
    } else {
        if (endBusi) {
            endBusi();
        }
    }
}

var rollback = function (connection) {
    if (connection) {
        connection.rollback(function () {
            connection.release();
        });
    }
}

/**
 * 转盘抽奖
 * @param context
 * @param res
 */
activity.getLotteryNum = function(context,res){

    var activityid = 1001
    var start = new moment().format('YYYY-MM-DD') + ' 00:00:00';
    var end = new moment().format('YYYY-MM-DD') + ' 23:59:59';

    async.waterfall([
        function(callback){
            getConnection(context,callback);
        },
        function(callback){
            var param = [start,end,context.userinfo.ph,activityid,context.platform];
            context.conn.query('select count(1) count from mk_lottery_record where time > ? and time < ? and phone = ? and activityid= ? and platform = ? limit 1',param,function(err,rows){
                if(err)
                {
                    rollback(context.conn);
                    return endResonse('1','获取失败',res);
                }
                else
                {
                    if(rows.length > 0 && rows[0].count > 0)
                    {
                        context.count = rows[0].count;

                        if(context.userinfo.integral >= 10)
                        {
                            context.conn.query('update mk_member set integral =  integral - 10 where un = ? and platform = ?',[context.userinfo.ph,context.platform],function(err){
                                if(err)
                                {
                                    rollback(context.conn);
                                    return endResonse('1','更新数据失败',res);
                                }
                                else
                                {
                                    //是否有足够金米抽奖
                                    var data = [context.userinfo.uid, Math.floor(new Date().getTime()/1000),'转盘抽奖',10,1,activityid,2,context.platform];
                                    context.conn.query('insert into mk_integral (uid,addtime,title,integral,inte_type,taskid,tasktype,platform) values (?,?,?,?,?,?,?,?) ',data,function(err){
                                        if(err)
                                        {
                                            rollback(context.conn);
                                            return endResonse('1','插入金米获取记录失败',res);
                                        }
                                        else
                                        {
                                            context.userinfo.integral = context.userinfo.integral - 10;
                                            callback(null);
                                        }
                                    });
                                }

                            });
                        }
                        else
                        {
                            rollback(context.conn);
                            return returnjsondata(res,{code:4,msg:'请获取金米后再尝试,谢谢'});
                        }

                    }
                    else
                    {
                        callback(null);
                    }
                }
            });
        },
        function(callback)
        {
            context.conn.query('select * from mk_activity_rate where activityid = ? AND platform = ? order by id ',[activityid,context.platform],function(err,rows){
                if(err)
                {
                    rollback(context.conn);
                    return endResonse('1','获取活动概率失败',res);
                }
                else
                {
                    if(rows.length > 0)
                    {
                        callback(null,rows);
                    }
                    else
                    {
                        rollback(context.conn);
                        return endResonse('1','获取活动概率为空',res);
                    }
                }
            });
        },
        function(rates,callback)
        {
            var randnumber = Math.floor(Math.random()*10000);
            async.eachSeries(rates,function(rate,callback){
                    if(context.result)
                    {
                      return callback();
                    }

                var number;
                if(context.count && context.count > 0)
                {
                    number = (rate.probability + rate.probability2) * 10000;
                }
                else
                {
                    number = rate.probability * 10000;
                }

                if(randnumber <= number)
                {
                    //判断该奖品是否还有剩余，如果没有给次一等奖品
                    var param = [start,end,rate.id,context.platform];
                    context.conn.query('select count(1) as count from mk_lottery_record where time >= ? and time <= ? and activityid=1001 and rateid = ? AND platform = ? limit 1',param,function(err,rows){
                        if(err)
                        {
                            rollback(context.conn);
                            return endResonse('1','获取转盘记录失败',res);
                        }
                        else
                        {
                                //如果当日该奖品兑奖次数大于等于上限则获取次一轮奖品
                                if(rows.length > 0 && rows[0].count >= rate.num)
                                {
                                    callback(null);
                                }
                                //中奖增加金米，入记录
                                if(rate.integral > 0)
                                {
                                    context.conn.query('update mk_member set integral = integral + ? where un = ? and platform = ?',[rate.integral,context.userinfo.ph,context.platform],function(err){
                                        if(err)
                                        {
                                            rollback(context.conn);
                                            return endResonse('1','更新用户金米失败',res);
                                        }
                                        else
                                        {
                                            context.userinfo.integral = context.userinfo.integral + rate.integral;
                                            //增加获取金米记录
                                            var data = [context.userinfo.uid,Math.floor(new Date().getTime()/1000),'转盘抽奖获取金米',rate.integral,0,rate.activityid,2,context.platform];

                                            context.conn.query('insert into mk_integral (uid,addtime,title,integral,inte_type,taskid,tasktype,platform) values (?,?,?,?,?,?,?,?) ',data,function(err){
                                                if(err)
                                                {
                                                    rollback(context.conn);
                                                    return endResonse('1','获取活动概率失败',res);
                                                }
                                                else
                                                {
                                                    //添加抽奖记录表
                                                    var data = [context.userinfo.uid,context.userinfo.ph,rate.activityid,new moment().format('YYYY-MM-DD HH:mm:ss'),rate.integral,rate.name,rate.id,context.platform];
                                                    context.conn.query('insert into mk_lottery_record (uid,phone,activityid,time,integral,awardrank,rateid,platform) values (?,?,?,?,?,?,?,?)',data,function(err){
                                                        if(err)
                                                        {
                                                            rollback(context.conn);
                                                            return endResonse('1','插入转盘失败',res);
                                                        }
                                                        else
                                                        {
                                                            //获取对应奖品的转盘角度
                                                            var angle = getAngle(rate.rank);
                                                            context.result = {};
                                                            context.result.code = '0';
                                                            context.result.angle = angle;
                                                            context.result.msg = rate.description;
                                                            context.result.integral = context.userinfo.integral;
                                                            context.result.rice = rate.integral;
                                                            callback(null);
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                                else
                                {
                                    callback(null);
                                }
                        }
                    });
                }
                else
                {
                    callback(null);
                }
            },
            function(callback)
            {
                commit(context.conn);
                return returnjsondata(res,context.result);
            });
        }
    ]);
}

/**
 * 转盘页面
 * @param context
 * @param res
 */
activity.lottery = function(context,res){
    var activityid = '1001';
    var start = new moment().format('YYYY-MM-DD') + ' 00:00:00';
    var end = new moment().format('YYYY-MM-DD') + ' 23:59:59';
    getConnection(context,function(err){
        if(err)
        {
            logger.getDebugLogger().error("数据库操作异常" + err);
            endResonse('500', '数据库操作异常', res);
            if(context.conn)
            {
                context.conn.release();
            }
            return;
        }
        else
        {
            var param = [start,end,context.userinfo.ph,activityid];
            context.conn.query('select count(1) count from mk_lottery_record where time > ? and time < ? and phone = ? and activityid = ? limit 1',param,function(err,rows){
                if(err)
                {
                    logger.getDebugLogger().error("数据库操作异常" + err);
                    endResonse('500', '数据库操作异常', res);
                    if(context.conn)
                    {
                        context.conn.release();
                    }
                    return;
                }
                else
                {
                    var first;
                    if(rows.length > 0 && rows[0].count > 0)
                    {
                        first = 1;
                    }
                    else
                    {
                        first = 0;
                    }

                    //查询分享信息
                    context.conn.query('select title,content,url,shortaddr from mk_activity_url where id = ? limit 1',[context.userinfo.platform],function(err,rows){
                        if(err)
                        {
                            logger.getDebugLogger().error("数据库操作异常" + err);
                            endResonse('500', '数据库操作异常', res);
                            if(context.conn)
                            {
                                context.conn.release();
                            }
                            return;
                        }
                        else
                        {
                            var shareinfo = {};
                            if(rows && rows.length > 0)
                            {
                                shareinfo = rows[0];
                            }
                            res.render('lottery',
                                { phone : context.userinfo.ph ,rice:context.userinfo.integral,phonenum:context.userinfo.ph,first:first,shareinfo:shareinfo}
                            )
                        }
                        if(context.conn)
                        {
                            context.conn.release();
                        }
                        return;
                    });
                }
            });
        }
    });
}

/**
 * 中奖信息轮播
 * @param res
 */
activity.getAwardRecord = function(context,res) {
    dbpool.getConnection(function (err, connection) {
        if (err) {
            logger.getDebugLogger().error("" + err);
            endResonse('500', '', res);
            if(connection)
            {
                connection.release();
            }
            return;
        }

        connection.query('select phone,integral,time from (select phone,integral,time from mk_lottery_record where platform = ? and time > CURDATE()-interval 1 day order by integral desc) t where integral > 0 order by time desc limit 50 ',[context.platform], function (err, rows) {
            if (err) {
                logger.getDebugLogger().error("数据库操作异常" + err);
                endResonse('500', '数据库操作异常', res);
                if(connection)
                {
                    connection.release();
                }
                return;
            }
            else
            {
                if(connection)
                {
                    connection.release();
                }
                return returnjsondata(res, rows);
            }
        });
    });
}

/**
 * 转盘兑奖记录
 * @param context
 * @param res
 */
activity.queryLotteryRecord = function(context,res){
    var activityid = '1001'

    dbpool.getConnection(function (err, connection) {
        if (err) {
            logger.getDebugLogger().error("" + err);
            endResonse('500', '获取连接失败', res);
            if(connection)
            {
                connection.release();
            }
            return;
        }

        connection.query('select count(*) total from mk_integral where inte_type = 0 and uid = (select uid from mk_member where un=? and platform = ?) and platform=? and taskid = 1001 limit 1 ',[context.ph,context.platform,context.platform], function (err, rows) {
            if (err) {
                    logger.getDebugLogger().error("" + err);
                    endResonse('500', '查询记录总数失败', res);
                    if(connection)
                    {
                        connection.release();
                    }
                    return;
            }
            else
            {
                var total;
                if(rows.length > 0 && rows[0].total > 0)
                {
                    total = rows[0].total % 10 > 0 ? Math.floor((rows[0].total / 10 + 1)) : Math.floor(rows[0].total / 10);
                }
                if(context.currentpage > total)
                {
                    context.currentpage = total;
                }
                var offset = parseInt(context.currentpage * 10 - 10);
                var param = [context.ph,context.platform,context.platform,activityid,offset];
                connection.query("select integral,from_unixtime(addtime,'%Y-%m-%d') time  from mk_integral where uid = (select uid from mk_member where un=? and platform = ?) and platform = ? and inte_type = 0 and taskid = ? order by addtime desc limit 10 offset ? ",param, function (err, rows) {
                    if (err) {
                            logger.getDebugLogger().error("" + err);
                            endResonse('500', '查询记录失败', res);
                            if(connection)
                            {
                                connection.release();
                            }

                            return;
                    }
                    else
                    {
                        if(connection)
                        {
                            connection.release();
                        }
                        res.render('lotteryrecord',
                            { resultList : rows ,currentPage:context.currentpage,total:total,phonenum:context.ph}
                        )
                        return;
                    }
                });
            }
        });
    });
}

module.exports = activity;