/**
 * Created by Administrator on 2015/6/3.
 */

var async = require('async');
var http = require('http');
var moment = require('moment')

var querystring = require('querystring');
var dbpool = require('../core/dbutil');
var config = require('../core/config')
var logger = require('../core/logger')
var resUtils = require('../core/resUtils');
var timeUtils = require('../core/timeUtils');
var crypto = require('../core/cryptoUtils');
var redisClient = require('../core/redisClient');
var RiceError = require('../core/RiceError')
var httpRequest = require('../core/httpRequest')
var common = require('./common.js')

var user = {};

var UC_PID = config.UC_PID;
var UC_SECRET = config.UC_SECRET;
var USER_VCODE_RATE_PREFIX = 'STR_WIFI_VCODE_RATE_';
var USER_VCODE_DAY_PREFIX = 'STR_SCHOOL_WIFI_VCODE_';
var CRYPTO_SALT = "www.anzhuoshangdian.com";
var IMG_FILE_SERVER = 'http://imgs.anzhuoshangdian.com';
var BUSI_SKIP = new Error();
var BUSI_EXCEPTION = new Error();
var BREAK_FLAG = BUSI_EXCEPTION;
var PLATFORM = 1;

var INNER_ERROR = new RiceError(500, '服务器内部错误');

var endResonse = resUtils.endResonse;
var returnjsondata = resUtils.returnjsondata;


var registerCheck = function (context, ispre, callback) {

    var data = querystring.stringify({
        ph: context.phoneNumber
    });

    new httpRequest().host(config.USER_CENTER_DOMAIN).path(config.PHONE_NUMBER_REGISTED_CHECK).POST().body(data)
        .onError(function (err) {
            logger.getDebugLogger().error("手机号码认证失败|" + context.phoneNumber + "|" + err);
            return callback(err);
        })
        .onAbnormalStatus(function (res) {
            logger.getDebugLogger().error("手机号码认证失败|" + context.phoneNumber + "|" + res.statusCode + "|" + res.statusMessage);
            return callback(INNER_ERROR);
        })
        .onReponse(function (buffer) {
            var checkInfo = JSON.parse(buffer);
            logger.getDebugLogger().debug("用户号码认证结果|" + context.phoneNumber + "|" + checkInfo.res + "|" + checkInfo.dtl);
            if ((ispre && checkInfo.res === '0') || (!ispre && checkInfo.res !== '0')) {
                return callback(null);
            } else {
                return callback(new RiceError(context.code, context.message));
            }
        }).exec();
}

var sendCodeVerifyByMin = function (context, callback) {
    var vcode_rate_key = USER_VCODE_RATE_PREFIX + context.phoneNumber;
    redisClient.get(vcode_rate_key, function (err, reply) {
        if (err) {
            // 如果REDIS出现异常，则忽略此判断
            logger.getDebugLogger().warn("从Redis中获取数据失败，KEY=" + vcode_rate_key + "|" + err);
            return callback(null);
        }
        if (reply) {
            return callback(new RiceError(204, '1分钟内只能发送一次验证码'));
        }
        return callback(null);
    });
}


var sendCodeVerifyByDay = function (context, callback) {
    var vcode_day_key = USER_VCODE_DAY_PREFIX + moment().format('YYYYMMDD') + "_" + context.phoneNumber;

    redisClient.get(vcode_day_key, function (err, dayCounts) {
        if (err || !dayCounts) {
            // 如果REDIS出现异常或者没有对应记录，则默认为0次
            logger.getDebugLogger().warn("从Redis中获取数据失败，KEY=" + vcode_day_key + "|" + err);
            return callback(null);
        }

        //  每天限额20次
        dayCounts = parseInt(dayCounts);
        if (dayCounts > 19) {
            return callback(new RiceError(205, '今天验证码发送次数达到20次'));
        }
        context.vcodeDayKey = vcode_day_key;
        context.dayCounts = dayCounts;
        return callback(null);
    });
}

var sendVerifyCode = function (context, callback) {

    var data = querystring.stringify({
        ph: context.phoneNumber,
        pid: UC_PID,
        secret: UC_SECRET
    });

    new httpRequest().host(config.USER_CENTER_DOMAIN).path('/users/account/phoneVcode').POST().body(data)
        .onError(function (err) {
            logger.getDebugLogger().error("发送验证码失败|" + context.phoneNumber + "|" + err);
            return callback(err);
        })
        .onAbnormalStatus(function (res) {
            logger.getDebugLogger().error("发送验证码失败|" + context.phoneNumber + "|" + res.statusCode + "|" + res.statusMessage);
            return callback(INNER_ERROR);
        })
        .onReponse(function (buffer) {
            var checkInfo = JSON.parse(buffer);
            logger.getDebugLogger().debug("用户号码认证结果|" + context.phoneNumber + "|" + checkInfo.res + "|" + checkInfo.dtl);
            if (checkInfo.res === '0') {
                return callback(null);
            } else {
                var error = new RiceError();
                return callback(new RiceError(context.code, context.message));
            }
        }).exec();
};


var increaseSendTimesByDay = function (context, callback) {
    redisClient.set(context.vcodeDayKey, context.dayCounts, function (err, reply) {
        if (err) {
            // 如果REDIS出现异常，则忽略此判断
            logger.getDebugLogger().warn("更新REDIS数据失败，KEY=" + context.vcodeDayKey + "|" + err);
        }
    });
    return callback(null);
}


var updateSendTimesByMin = function (context, callback) {
    var vcode_rate_key = USER_VCODE_RATE_PREFIX + context.phoneNumber;
    redisClient.set(vcode_rate_key, '1', function (err, reply) {
        if (err) {
            // 如果REDIS出现异常，则忽略此判断
            logger.getDebugLogger().warn("更新REDIS数据失败，KEY=" + vcode_rate_key + "|" + err);
        }
    });
    redisClient.expire(vcode_rate_key, 60, function (err, reply) {
        if (err) {
            // 如果REDIS出现异常，则忽略此判断
            logger.getDebugLogger().warn("更新数据的过期时间失败，KEY=" + vcode_rate_key + "|" + err);
        }
    });
    return callback(null);
}


var getConnection = function (context, callback) {
    dbpool.getConnection(function (err, connection) {
        context.conn = connection;
        if (err) {
            logger.getDebugLogger().error("数据库连接异常：" + err);
            return callback(err);
        }
        connection.beginTransaction(function (err) {
            if (err) {
                logger.getDebugLogger().error("数据库连接异常：" + err);
                return callback(err);
            }
            return callback(null);
        })
    })
}

var getConnectionExt = function (callback) {
    getConnection(null, callback)
}

var commit = function (connection, endBusi, endBusiWithException) {
    if (connection) {
        connection.commit(function (err) {
            if (err) {
                connection.rollback(function () {
                    connection.release();
                    if (endBusiWithException) {
                        endBusiWithException(err);
                    }
                });
            } else {
                connection.release();
                if (endBusi) {
                    endBusi();
                }
            }
        });
    } else {
        if (endBusi) {
            endBusi();
        }
    }
}

var rollback = function (connection) {
    if (connection) {
        connection.rollback(function () {
            connection.release();
        });
    }
}


/**发送短信验证码
 *
 * @param phoneNumber 用户的手机号码
 * @param res 响应
 */
user.sendRegisterCode = function (phoneNumber, res) {

    var context = {};
    context.phoneNumber = phoneNumber;
    async.waterfall([

            // 检查号码是否已经被注册
            function (callback) {
                context.code = 202;
                context.message = '号码已经注册';
                registerCheck(context, true, callback);
            },

            // 判断一分钟内是否多次发送
            function (callback) {
                sendCodeVerifyByMin(context, callback);
            },

            // 判断每日获取验证码数是否超限
            function (callback) {
                sendCodeVerifyByDay(context, callback);
            },

            // 发送短信验证码
            function (callback) {
                sendVerifyCode(context, callback);
            },

            // 更新当日已发送次数
            function (callback) {
                increaseSendTimesByDay(context, callback);
            },

            // 更新本分钟已发送状态
            function (callback) {
                updateSendTimesByMin(context, callback);
            }

        ],
        function (err) {
            if (!err) {
                logger.getDebugLogger().info("用户验证码发送成功|" + phoneNumber);
                endResonse(0, '验证码发送成功', res);
            } else {
                logger.getDebugLogger().error("用户注册失败|" + phoneNumber + "|" + err);
                if (err instanceof RiceError) {
                    endResonse(err.code, err.message, res);
                } else {
                    endResonse(500, '服务器错误', res);
                }

            }
        }
    );

}

/**用户注册
 *
 * @param userInfo 注册用户信息
 * @param res 响应
 */
user.register = function (userInfo, res) {

    var context = {};
    context.userInfo = userInfo;
    context.phoneNumber = userInfo.phoneNumber;
    context.platform = userInfo.platform;
    async.waterfall([

            //检查号码是否已经被注册
            function (callback) {
             context.code = 202;
             context.message = '号码已经注册';
             registerCheck(context,true,callback);
             },

            // 通过用户中心注册
            function (callback) {
                userInfo.password = crypto.md5(userInfo.password);
                var data = querystring.stringify({
                    ph: userInfo.phoneNumber,
                    pwd: userInfo.password,
                    vcode: userInfo.vcode,
                    pid: UC_PID,
                    secret: UC_SECRET
                });

                new httpRequest().host(config.USER_CENTER_DOMAIN).path('/users/account/phregister').POST().body(data)
                    .onError(function (err) {
                        logger.getDebugLogger().error("用户注册失败|" + context.phoneNumber + "|" + err);
                        return callback(err);
                    })
                    .onAbnormalStatus(function (res) {
                        logger.getDebugLogger().error("用户注册失败|" + context.phoneNumber + "|" + res.statusCode + "|" + res.statusMessage);
                        return callback(INNER_ERROR);
                    })
                    .onReponse(function (buffer) {

                        var registerResult = JSON.parse(buffer);
                        logger.getDebugLogger().info('register response：' + registerResult.dtl);
                        var userRegisterInfo = {};
                        userRegisterInfo.uid = registerResult.data.user_id; //30511677
                        userRegisterInfo.un = userInfo.phoneNumber;
                        userRegisterInfo.pwd = userInfo.password;
                        userRegisterInfo.ph = userInfo.phoneNumber;
                        userRegisterInfo.regtime = timeUtils.getTimestampSecond();
                        context.userRegisterInfo = userRegisterInfo;

                        if (!registerResult || !registerResult.res || registerResult.res !== '0') {
                            return callback(new RiceError(212, '注册失败'));
                        } else if (registerResult.res === '104') {
                            return callback(new RiceError(213, '验证码无效'));
                        }

                        return callback(null);
                    }).exec();
            },


            // 获取数据库连接并开启事务
            function (callback) {
                getConnection(context, callback);
            },

            //  在本地注册
            function (callback) {
                var userRegisterInfo = {};
                userRegisterInfo.uid = context.userRegisterInfo.uid; //30511677
                userRegisterInfo.un = userInfo.phoneNumber;
                userRegisterInfo.pwd = userInfo.password;
                userRegisterInfo.ph = userInfo.phoneNumber;
                userRegisterInfo.integral = 0;
                userRegisterInfo.sid = crypto.md5(userInfo.ckid + userRegisterInfo.uid + CRYPTO_SALT);
                userRegisterInfo.regtime = timeUtils.getTimestampSecond();
                context.userRegisterInfo = userRegisterInfo;

                var params = [context.userRegisterInfo.uid, context.userRegisterInfo.un, context.userRegisterInfo.pwd,context.userRegisterInfo.ph,
                    context.userRegisterInfo.regtime, 1,200, userInfo.platform]; // 默认的状态
                context.conn.query('INSERT INTO mk_member (UID, UN, PWD, PH, REGTIME, STATUS, INTEGRAL, PLATFORM) ' +
                    'VALUES (?, ?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                    return callback(err ? BUSI_EXCEPTION : null);
                })
            },

            //  注册相关活动的金米发放
            /*function (callback) {
                var nowOfSecond = timeUtils.getTimestampSecond();
                var params = [Math.floor(new Date().getTime()/1000), Math.floor(new Date().getTime()/1000)];
                context.conn.query('select aid from mk_register_actives where starttime <= ? and endtime > ? ', params, function (err, result) {
                    if (err) {
                        return callback(err);
                    }
                    if (!result || result.length === 0) {
                        return callback();
                    }
                    context.userRegisterInfo.a['id'] = result[0].aid;
                    context.userRegisterInfo.a['title'] = '注册成功增加金米';
                    context.conn.query('select integral from mk_integral_activities where aid=? and num > 0 and status=1', [result[0].aid], function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if (!result || result.length === 0) {
                            return callback(BUSI_SKIP);
                        }

                        context.userRegisterInfo.a['integral'] = result[0].integral;
                        return callback(null);
                    })
                })
            },*/

            // 登录后金米相关的处理
            /*function (callback) {
                var params = [context.userRegisterInfo.uid, timeUtils.getTimestampSecond(), context.userRegisterInfo.a['title'], context.userRegisterInfo.a['integral'], 0, context.userRegisterInfo.a['id'], 2, context.platform];
                context.conn.query('insert into mk_integral (uid, addtime, title, integral, inte_type, taskid, tasktype, platform)' +
                    'values (?, ?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                    if (err) {
                        return callback(err);
                    }
                    context.conn.query(' UPDATE mk_integral_activities SET num=num-1 WHERE aid= ? and status=1 LIMIT 1', [loginInfo.taskid], function (err, result) {
                        if (err) {
                            logger.getDebugLogger().error("用户注册后活动道具个数失败：" + err);
                            return callback(err);
                        }
                        context.conn.query(' UPDATE mk_member SET integral=integral + ? WHERE uid= ? and platform = ? LIMIT 1', [loginInfo.integral, loginInfo.uid, context.platform], function (err, result) {
                            if (err) {
                                logger.getDebugLogger().error("更新用户注册后金米总数失败：" + err);
                                return callback(err);
                            }
                            return callback(null);
                        })
                    })
                });
            }*/

            //  分享送金米
            /*function (callback) {
                context.conn.query('select phone,integral,taskid,fromuid from mk_activity_regreward where phone = ? and platform = ? limit 1', [context.userRegisterInfo.ph,context.platform], function (err, result) {
                    if (err) {
                        return callback(err);
                    }
                    context.fromuser['id'] = result[0].fromuid;
                    context.fromuser['taskid'] = result[0].taskid;
                    if (result && result[0] && parseInt(result[0].integral) > 0) {
                        var shareIntegral = result[0].integral;
                        var params = [context.userRegisterInfo.uid, timeUtils.getTimestampSecond(), '注册成功分享转盘赠送', shareIntegral, 0, result[0].taskid, 2];
                        context.conn.query('insert into mk_integral (uid, addtime, title, integral, inte_type, taskid, tasktype, platform)' +
                            'values (?, ?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                            if (err) {
                                return callback(err);
                            } else {
                                context.conn.query(' UPDATE mk_member SET integral=integral + ? WHERE uid= ? and platform = ? LIMIT 1', [shareIntegral, context.userRegisterInfo.uid, context.platform], function (err, result) {
                                    if (err) {
                                        logger.getDebugLogger().error("更新用户注册后金米总数失败：" + err);
                                        return callback(err);
                                    }
                                    return callback(null);
                                })
                            }
                        })
                    }
                    return callback(null);
                })
            },

            function (callback) {
                if (parseInt(context.fromuser['id']) > 0 && parseInt(context.fromuser['taskid']) > 0) {
                    context.conn.query('select t.target,t.coins integral,t2.complete from mk_activity_task t,mk_activity_taskrecord t2 ' +
                        'where t.platform = t2.platform and 1.platform = ? and t.status != 0 and t2.status=1 and t.id = t2.taskid and t2.uid= ? limit 1', [context.fromuser['id'],context.platform], function (err, result) {
                        if (err) {
                            return callback(err);
                        } else if (result && result[0] && parseInt(result[0].target) > 0 && parseInt(result[0].taskid) >= 0) {
                            if (parseInt(result[0].target) - parseInt(result[0].complete) === 1) {
                                context.conn.query('update mk_activity_taskrecord set complete = complete + 1,status=2,time = ? where uid = ? and taskid = ? and platform = ? ',
                                    [moment().format("YYYY-MM-DD HH:mm:ss"), context.fromuser['id'], context.fromuser['taskid'], context.platform], function (err, result) {
                                        if (err) {
                                            return callback(err);
                                        } else {
                                            return callback(null);
                                        }
                                    })
                            } else {
                                context.conn.query('update mk_activity_taskrecord set complete = complete + 1,time = ? where uid = ? and taskid = ? and platform = ?',
                                    [moment().format("YYYY-MM-DD HH:mm:ss"), context.fromuser['id'], context.fromuser['taskid'], context.platform], function (err, result) {
                                        if (err) {
                                            return callback(err);
                                        } else {
                                            return callback(null);
                                        }
                                    })
                            }
                        }
                    })
                }
            }*/

            function(callback){
                //查询最新的金米数
                context.conn.query('select scid,integral from mk_member where uid = ? and platform = ?  limit 1 ',
                    [context.userRegisterInfo.uid,userInfo.platform], function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if(result && result.length > 0)
                        {
                            context.userRegisterInfo.integral = result[0].integral;
                            context.userRegisterInfo.scid = result[0].scid;
                        }
                        callback(null);
                    });
            }
        ],

        //if($rs['target'] > $rs['complete'] && $rs['target'] - $rs['complete'] == 1)
        //{
        //    $sql = "update mk_activity_taskrecord set complete = complete + 1,status=2,time = '{$date}' where uid={$res['fromuid']} and taskid={$res['taskid']} ";
        //    $rs = $this->query($sql);
        //}
        //else if($rs['target'] > $rs['complete'])
        //{
        //    $sql = "update mk_activity_taskrecord set complete = complete + 1,time = '{$date}' where uid={$res['fromuid']} and taskid={$res['taskid']} ";
        //    $rs = $this->query($sql);
        //}

        function (err) {
            if (!err) {
                commit(context.conn,
                    function () {
                        logger.getDebugLogger().debug("用户注册成功|" + context.userRegisterInfo.ph);
                        //endResonse(0, '用户注册成功', res);
                        var ret = {'error':0,'uid':context.userRegisterInfo.uid,'ph':context.userRegisterInfo.ph,'integral':context.userRegisterInfo.integral,'scid':context.userRegisterInfo.scid,'sid':context.userRegisterInfo.sid};
                        returnjsondata(res,ret);
                    },
                    function (terr) {
                        logger.getDebugLogger().error("用户注册失败，提交事务失败|" + context.userRegisterInfo.ph + "|" + terr);
                        endResonse(500, '服务器错误', res);
                    })
            } else {
                rollback(context.conn);
                logger.getDebugLogger().error("用户注册失败|" + context.userRegisterInfo.ph + "|" + err);
                if (BUSI_EXCEPTION instanceof RiceError) {
                    endResonse(err.code, err.message, res);
                } else {
                    endResonse(500, '服务器错误', res);
                }
            }
        })
}

user.login = function (loginInfo, res) {

    var context = {};
    context.loginInfo = loginInfo;

    async.waterfall([

            // 转发请求道用户中心进行登录
            function (callback) {
                loginInfo.password = crypto.md5(loginInfo.password);
                var data = querystring.stringify({
                    ph: loginInfo.ph,
                    pwd: loginInfo.password,
                    pid: UC_PID,
                    secret: UC_SECRET
                });

                new httpRequest().host(config.USER_CENTER_DOMAIN).path('/users/account/phLogin').POST().body(data)
                    .onError(function (err) {
                        logger.getDebugLogger().error("用户登录失败|" + loginInfo.ph + "|" + err);
                        return callback(err);
                    })
                    .onAbnormalStatus(function (res) {
                        logger.getDebugLogger().error("用户登录失败|" + loginInfo.ph + "|" + res.statusCode + "|" + res.statusMessage);
                        return callback(INNER_ERROR);
                    })
                    .onReponse(function (buffer) {
                        var verifyResult = JSON.parse(buffer);
                        logger.getDebugLogger().debug("用户登录结果|" + verifyResult);
                        if (!verifyResult || !verifyResult.res || verifyResult.res !== '0') {
                            loginInfo.error = '1';
                            loginInfo.msg = '用户名密码错误';
                            delete loginInfo.ckid;
                            delete loginInfo.password;
                            return returnjsondata(res,loginInfo);
                        } else {
                            loginInfo.uid = verifyResult.data.user_id
                            return callback(null);
                        }
                    }).exec();
            },

            // 获得uid后创建session ID
            function (callback) {
                context.loginInfo.sid = crypto.md5(context.loginInfo.ckid + context.loginInfo.uid + CRYPTO_SALT);
                return callback(null);
            },

            // 获取数据库连接，并打开事务
            function (callback) {
                getConnection(context, callback);
            },


            // 校正用户数据
            function (callback) {
                context.conn.query('select COUNT(*) AS num, integral,scid from mk_member where un = ? and platform = ? limit 1 ',
                    [loginInfo.ph,loginInfo.platform], function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if (result[0] && parseInt(result[0].num) > 0) {
                            loginInfo.integral = result[0].integral;
                            loginInfo.scid = result[0].scid;
                            context.conn.query('update mk_member set lasttime = ? where ph = ? and platform = ?', [timeUtils.getTimestampSecond(), loginInfo.ph,loginInfo.platform], function (err, result) {
                                if (err) {
                                    logger.getDebugLogger().error("更新mk_member信息失败:" + err);
                                    return callback(err);
                                } else {
                                    return callback(null)
                                }
                            })
                        }
                        else
                        {
                            var params = [loginInfo.uid, loginInfo.ph, loginInfo.password, loginInfo.ph, timeUtils.getTimestampSecond(), 1, 200, loginInfo.platform];
                            context.conn.query('INSERT INTO mk_member (UID, UN, PWD, PH, REGTIME, STATUS, INTEGRAL, PLATFORM) ' +
                                'VALUES (?, ?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                                if (err) {
                                    logger.getDebugLogger().error("插入用户信息失败|" + loginInfo.ph + "|" + err);
                                    return callback(err);
                                } else {
                                    return callback(null)
                                }
                            })
                        }
                    }
                )
            },

            // 维护用户登录设备信息
            function (callback) {
                context.conn.query('select COUNT(*) AS num from mk_device where device_id = ? and ph = ? and platform = ? limit 1 ',
                    [loginInfo.ckid, loginInfo.ph,loginInfo.platform], function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if (parseInt(result[0].num) === 0) {
                            context.conn.query('insert into mk_device (ph, device_id, uptime, platform) values (?, ?, ?, ?)',
                                [loginInfo.ph, loginInfo.ckid, timeUtils.getTimestampSecond(),loginInfo.platform], function (err, result) {
                                    if (err) {
                                        logger.getDebugLogger().error("插入设备信息失败|" + err);
                                        return callback(err);
                                    } else {
                                        return callback(null)
                                    }
                                }
                            )
                        }
                        else
                        {
                            return callback(null);
                        }
                    }
                )
            },

            // 返回登录后可兑换的4个商品
            /*function (callback) {
                var nowOfSecond = timeUtils.getTimestampSecond();
                var params = [1, nowOfSecond, nowOfSecond, 'hot', 0, 4];
                context.conn.query('SELECT gid,title,descs,fvalue,price,gtype,icon,num,endtime ' +
                    'FROM mk_integral_goods WHERE status= ? AND starttime< ? AND endtime > ? order by ? limit ?, ? ',
                    params, function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if (result) {
                            var n = result.length;
                            for (var i = 0; i < n; i++) {
                                result[i].icon = IMG_FILE_SERVER + result[i].icon;
                            }
                        }
                        loginInfo.list = result;
                        return callback(null);
                    }
                )

            },*/

            // 处理用户登录后活动相关逻辑
            /*function (callback) {
                loginInfo.desc = '';
                if (loginInfo.type === '1') {
                    var nowOfSecond = timeUtils.getTimestampSecond();
                    context.conn.query('select aid,title,starttime,endtime,num,descs,show_descs,icon,atype,' +
                        'jointype,integral,expire,prior_banner,pic,priority,sort,status,addtime,uptime ' +
                        'from mk_integral_activities where status = ? and ? > starttime and ? < endtime and aid = ? limit 1 ',
                        [1, loginInfo.taskid, nowOfSecond, nowOfSecond], function (err, result) {
                            if (err) {
                                return callback(err);
                            }
                            if (!result || result.length === 0) {
                                loginInfo.desc = '活动不存在或不在有效期';
                                return callback(BUSI_SKIP);
                            } else if (result[0].jointype === '0') {
                                loginInfo.integral = result[0].integral;
                                context.conn.query('select COUNT(1) AS num from mk_integral ' +
                                    'where uid = ? and taskid = ? and inte_type = ? and tasktype = ? limit 1',
                                    [loginInfo.uid, loginInfo.taskid, 0, 2], function (err, result) {
                                        if (err) {
                                            return callback(err);
                                        }
                                        if (result[0].num !== '0') {
                                            loginInfo.desc = '亲，你已经参加过此活动，看看其他活动吧';
                                            return callback(BUSI_SKIP);
                                        } else {
                                            loginInfo.activeTitle = result[0].title;
                                            return callback(null);
                                        }
                                    }
                                )
                            } else if (result[0].jointype === '1') {
                                loginInfo.integral = result[0].integral;
                                context.conn.query('select COUNT(1) AS num from mk_integral where  `uid` =  ? and `taskid` = ? and addtime> ? limit 1',
                                    [loginInfo.uid, loginInfo.taskid, new Date(moment().format('YYYY-MM-DD')).getTime() / 1000], function (err, result) {
                                        if (err) {
                                            return callback(err);
                                        }
                                        if (result[0].num !== '0') {
                                            loginInfo.desc = '亲，你今天已经参加过此活动，明天再来或者看看其他活动吧';
                                            return callback(BUSI_SKIP);
                                        } else {
                                            loginInfo.activeTitle = result[0].title;
                                            return callback(null);
                                        }
                                    }
                                )
                            } else if (parseInt(result[0].num) < 1) {
                                loginInfo.desc = '亲，活动的奖品已经领取完了，看看其他活动吧';
                                return callback(BUSI_SKIP);
                            }
                        }
                    )
                } else {
                    // 无需后续金米的处理
                    return callback(BUSI_SKIP);
                }

            },*/

            // 登录后金米相关的处理
            /*function (callback) {
                var params = [loginInfo.uid, timeUtils.getTimestampSecond(), title, loginInfo.integral, 0, loginInfo.taskid, 2];
                context.conn.query('insert into mk_integral (uid, addtime, title, integral, inte_type, taskid, tasktype)' +
                    'values (?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                    if (err) {
                        return callback(err);
                    }
                    context.conn.query(' UPDATE mk_integral_activities SET num=num-1 WHERE aid= ? and status=1 LIMIT 1', [loginInfo.taskid], function (err, result) {
                        if (err) {
                            logger.getDebugLogger().error("更新用户登录后活动道具个数失败：" + err);
                            return callback(err);
                        }
                        context.conn.query(' UPDATE mk_member SET integral=integral + ? WHERE uid= ? LIMIT 1', [loginInfo.integral, loginInfo.uid], function (err, result) {
                            if (err) {
                                logger.getDebugLogger().error("更新用户登录后金米总数失败：" + err);
                                return callback(err);
                            }
                            return callback(null);
                        })
                    })
                });
            }*/

            function(callback){
                //查询最新的金米数
                context.conn.query('select scid,integral from mk_member where uid = ? and platform = ?  limit 1 ',
                    [loginInfo.uid,loginInfo.platform], function (err, result) {
                        if (err) {
                            return callback(err);
                        }
                        if(result && result.length > 0)
                        {
                            loginInfo.integral = result[0].integral;
                            loginInfo.scid = result[0].scid;
                        }
                        callback(null);
                    });
            }
        ],

        function (err) {
            if (!err || err === BUSI_SKIP) {
                commit(context.conn,
                    function () {
                        logger.getDebugLogger().debug("用户登录成功|" + loginInfo.ph);
                        loginInfo.error = '0';
                        loginInfo.msg = '登录成功';
                        delete loginInfo.ckid;
                        delete loginInfo.password;
                        returnjsondata(res,loginInfo);
                    },
                    function (terr) {
                        logger.getDebugLogger().error("用户登录失败，提交事务失败|" + loginInfo.ph + "|" + terr);
                        endResonse(500, '服务器错误', res);
                    })
            }
            else
            {
                rollback(context.conn);
                logger.getDebugLogger().error("用户登录失败|" + loginInfo.ph + "|" + err);
                if (BUSI_EXCEPTION instanceof RiceError) {
                    endResonse(err.code, err.message, res);
                }
                else
                {
                    endResonse(500, '服务器错误', res);
                }
            }
        })
}

user.sendPasswdVcode = function (phoneNumber, res) {

    var context = {};
    context.phoneNumber = phoneNumber;

    async.waterfall([
            // 检查号码是否已经被注册
            function (callback) {

                context.code = 209;
                context.message = '该用户没有注册';
                registerCheck(context, false, callback);
            },

            // 判断一分钟内是否多次发送
            function (callback) {
                sendCodeVerifyByMin(context, callback);
            },

            // 判断每日获取验证码数是否超限
            function (callback) {
                sendCodeVerifyByDay(context, callback);
            },

            // 发送短信验证码
            function (callback) {
                sendVerifyCode(context, callback);
            },

            // 更新当日已发送次数
            function (callback) {
                increaseSendTimesByDay(context, callback);
            },

            // 更新本分钟已发送状态
            function (callback) {
                updateSendTimesByMin(context, callback);
            }

        ],
        function (err) {
            if (!err) {
                logger.getDebugLogger().info("用户验证码发送成功|" + phoneNumber);
                endResonse(0, '验证码发送成功', res);
            } else {
                logger.getDebugLogger().error("用户验证码发送失败|" + phoneNumber + "|" + err);
                if (err instanceof RiceError) {
                    endResonse(err.code, err.message, res);
                } else {
                    endResonse(500, '服务器错误', res);
                }

            }
        })
}

user.changePasswd = function (context, res) {

    context.phoneNumber = context.userinfo.ph;

    async.waterfall([
            // 检查号码是否已经被注册

            function (callback) {
                context.code = 209;
                context.message = '该用户没有注册';
                registerCheck(context, false, callback);
            },

            // 获取数据库连接，并打开事务
            function (callback) {
                getConnection(context, callback);
            },

            // 维护用户登录设备信息
            function (callback) {
                context.conn.query('select COUNT(*) AS num from mk_device where device_id = ? and ph = ? limit 1 ',
                    [context.userinfo.ckid, context.userinfo.ph], function (err, result) {
                        if (err) {
                            logger.getDebugLogger().error("修改密码后后更新用户设备信息失败：" + err);
                            return callback(err);
                        }
                        if (result[0].num === '0') {
                            context.conn.query('insert into mk_device (ph, device_id, uptime) values (?, ?, ?)',
                                [context.userinfo.ph, context.userinfo.ckid, timeUtils.getTimestampSecond()], function (err, result) {
                                    if (err) {
                                        logger.getDebugLogger().error(context.context.ph + "|修改密码后后更新用户设备信息失败|" + err);
                                        return callback(err);
                                    } else {
                                        return callback(null)
                                    }
                                }
                            )
                        } else {
                            return callback(null);
                        }
                    }
                )
            },

            // 重置密码
            function (callback) {
                context.userinfo.pwd = crypto.md5(context.userinfo.pwd);
                var data = querystring.stringify({
                    ph: context.userinfo.ph,
                    vcode: context.userinfo.vcode,
                    pwd: context.userinfo.pwd,
                    pid: UC_PID,
                    secret: UC_SECRET
                });



                new httpRequest().host(config.USER_CENTER_DOMAIN).path('/users/account/setNewPwd').POST().body(data)
                    .onError(function (err) {
                        logger.getDebugLogger().error("用户重置密码失败|" + context.userinfo.ph + "|" + err);
                        return callback(err);
                    })
                    .onAbnormalStatus(function (res) {
                        logger.getDebugLogger().error("用户重置密码失败|" + context.userinfo.ph + "|" + res.statusCode + "|" + res.statusMessage);
                        return callback(INNER_ERROR);
                    })
                    .onReponse(function (buffer) {
                        var checkInfo = JSON.parse(buffer);
                        logger.getDebugLogger().debug("用户重置密码结果|" + context.userinfo.ph + "|" + checkInfo.res + "|" + checkInfo.dtl);
                        if (checkInfo.res === '0') {
                            //userInfo.uid = checkInfo.data.user_id;
                            return callback(null);
                        } else if (checkInfo.res === '219' || checkInfo.res === '220' || checkInfo.res === '305') {
                            return callback(new RiceError(227, '验证码错误'));
                        } else {
                            return callback(new RiceError(206, '修改失败'));
                        }
                    }).exec();
            },

            // 校正用户数据
            function (callback) {

                context.conn.query('select COUNT(*) AS num, integral, scid from mk_member where  `uid` = ? and status=1 and platform = ?',
                    [context.userinfo.uid, context.userinfo.platform], function (err, result) {
                        if (err) {
                            // 密码最终存放实际是在用户中心，因此一旦用户中心重置成功了，就表示成功，避免数据同步问题导致用户密码设置结果差异
                            logger.getDebugLogger().warn(context.userinfo.ph + "|用户密码已经修改成功，但校正用户信息出错|" + err);
                            return callback(BUSI_SKIP);
                        }
                        if (result[0] && parseInt(result[0].num) > 0) {
                            //userInfo.integral = result[0].integral;
                            //userInfo.scid = result[0].scid;
                            context.conn.query('update mk_member set pwd = ? where ph = ? and platform = ?', [context.userinfo.pwd, context.userinfo.ph, context.userinfo.platform], function (err, result) {
                                if (err) {
                                    // 密码最终存放实际是在用户中心，因此一旦用户中心重置成功了，就表示成功，避免数据同步问题导致用户密码设置结果差异
                                    logger.getDebugLogger().error(context.userinfo.ph + "|用户密码已经修改成功，但更新用户信息出错|" + err);
                                    return callback(BUSI_SKIP);
                                } else {
                                    return callback(null)
                                }
                            })
                        } else {
                            var params = [context.userinfo.uid, context.userinfo.ph, context.userinfo.pwd, context.userinfo.ph, timeUtils.getTimestampSecond(), 1,context.userinfo.platform];
                            context.conn.query('INSERT INTO mk_member (UID, UN, PWD, PH, REGTIME, STATUS, PLATFORM) ' +
                                'VALUES (?, ?, ?, ?, ?, ?, ?)', params, function (err, result) {
                                if (err) {
                                    // 密码最终存放实际是在用户中心，因此一旦用户中心重置成功了，就表示成功，避免数据同步问题导致用户密码设置结果差异
                                    logger.getDebugLogger().error(context.userinfo.ph + "|用户密码已经修改成功，但更新用户信息出错|" + err);
                                    return callback(BUSI_SKIP);
                                } else {
                                    return callback(null)
                                }
                            })
                        }
                    }
                )
            },

        ],
        function (err) {
            if (!err || err === BUSI_SKIP) {
                commit(context.conn,
                    function () {
                        logger.getDebugLogger().debug("用户修改密码成功|" + context.userinfo.ph);
                        //endResonse(0, '用户修改密码成功', res);
                        var data = {'ph':context.userinfo.ph,'uid':context.userinfo.uid,'sid':context.userinfo.sid,error:"0",msg:'密码修改成功',integral:context.userinfo.integral,scid:context.userinfo.scid};
                        returnjsondata(res,data);
                    },
                    function (terr) {
                        logger.getDebugLogger().error("用户修改密码失败，提交事务失败|" + context.userinfo.ph + "|" + terr);
                        endResonse(500, '服务器错误', res);
                    })
            } else {
                rollback(context.conn);
                logger.getDebugLogger().error("用户修改密码失败|" + context.userinfo.ph + "|" + err);
                if (BUSI_EXCEPTION instanceof RiceError) {
                    endResonse(err.code, err.message, res);
                } else {
                    endResonse(500, '服务器错误', res);
                }
            }
        })
}

/**
 * 增加金米
 * @param param
 * @param res
 */
user.getintegral = function(context,res){
    async.waterfall([
        function (callback) {

            endResonse(123,context.uid,res);
        }
    ],function(err,result){

    });
}

/**
 * 积分换列表
 * @param param
 * @param res
 */
user.exchangeIntegral = function(context,res){
    var type = context.param.type == 'new' ? 'newest' : 'hot';
    var offset = context.param.offset;
    var limit = context.param.limit;

    dbpool.getConnection(function (err, connection) {
        if (err) {
            logger.getDebugLogger().error("数据库连接异常：" + err);
            endResonse('500', '内部错误', res);
            if(connection)
            {
                connection.release();
            }
            return;
        }
        var params = [type,offset,limit];

        connection.query("SELECT gid,title,descs,fvalue,price,gtype,icon,num,endtime FROM mk_integral_goods WHERE status=1 order by ? limit ? , ? ",params, function(err,result){
            if (err) {
                connection.rollback(function () {
                    logger.getDebugLogger().error("数据库连接异常：" + err);
                    endResonse('500', '内部错误', res);
                    if(connection)
                    {
                        connection.release();
                    }
                    return;
                });
            } else {
                connection.commit(function (err) {
                    if (err) {
                        connection.rollback(function () {
                            logger.getDebugLogger().error("数据库连接异常：" + err);
                            endResonse('500', '内部错误', res);
                            if(connection)
                            {
                                connection.release();
                            }
                            return;
                        });
                    } else {
                        if(connection)
                        {
                            connection.release();
                        }

                        //替换iconurl
                        for(var i = 0; i < result.length;i++)
                        {
                            result[i].icon = 'http://imgs.anzhuoshangdian.com' + result[i].icon;
                        }

                        var ret = {'list':result,'desc':"亲,所有商品都在等你兑换哦~",'error':0,'msg':'商品列表和用户金米信息','ph':context.userinfo.ph,'integral':context.userinfo.integral,'scid':context.userinfo.scid};
                        //resUtils.endResonse(0, ret, res);
                        returnjsondata(res,ret);
                        return;
                    }
                });
            }
        });
    });
}

/**
 * 金米查询
 * @param param
 * @param res
 */
user.integralrecord = function(context,res){

    dbpool.getConnection(function (err, connection) {
        if (err) {
            logger.getDebugLogger().error("数据库连接异常：" + err);
            endResonse('500', '内部错误', res);
            connection.release();
            return callback(BREAK_FLAG, '内部错误');
        }
        var para = [context.param.uid,context.param.type,context.userinfo.platform,context.param.limit,context.param.offset];
        connection.query("select title,integral,addtime,taskid from mk_integral where uid = ? and inte_type = ? and taskid != 1001 and platform = ? order by addtime desc limit ? offset ?",para,function(err,result){
            if (err) {
                logger.getDebugLogger().error("数据库连接异常：" + err);
                endResonse('500', '内部错误', res);
                connection.release();
                return;
            } else {
                        if(context.param.type == 0)
                        {
                            connection.release();
                            var ret = {'list':result,'type':context.param.type,'error':0,'msg':'记录列表返回成功',ph:context.userinfo.ph,integral:context.userinfo.integral,scid:context.userinfo.sid};
                            returnjsondata(res,ret);
                            return;
                        }
                        else
                        {
                            var i = -1;
                            async.eachSeries(result,function(item,callback){
                                    i++;
                                connection.query('select a.gid,a.itemid,a.gtype,b.descs from mk_integral_order a ,mk_integral_goods b where a.gid = b.gid and oid = ? limit 1',[item.taskid],function(err,row){
                                    if (err) {
                                            logger.getDebugLogger().error("数据库连接异常：" + err);
                                            endResonse('500', '内部错误', res);
                                            connection.release();
                                            return callback(BREAK_FLAG, '内部错误');
                                    }
                                    else
                                    {
                                        result[i].gtype = 1;
                                        if(row.length > 0) {
                                            result[i].desc = row[0].descs;
                                            //卡密查询出密码和有效期
                                            if (row[0].gtype == 2) {
                                                connection.query('select expire, addtime, cardno, password from mk_goods_list where itemid = ? limit 1', [row[0].itemid], function (err, row) {
                                                    if (err) {
                                                            logger.getDebugLogger().error("数据库连接异常：" + err);
                                                            endResonse('500', '内部错误', res);
                                                            connection.release();
                                                            return callback(BREAK_FLAG, '内部错误');
                                                    }
                                                    else
                                                    {
                                                        result[i].expire = row[0].expire;
                                                        result[i].addtime = row[0].addtime;
                                                        result[i].cardno = row[0].cardno;
                                                        result[i].password = row[0].password;
                                                        if(row[0].cardno && row[0].cardno)
                                                        {
                                                            result[i].gtype = 2;
                                                        }
                                                        return callback(null);
                                                    }
                                                });
                                            }
                                            else
                                            {
                                                result[i].desc = row[0].descs;
                                                result[i].gtype = 1;
                                                callback(null);
                                            }
                                        }
                                        else
                                        {
                                            callback(null);
                                        }
                                    }
                                });
                            },
                                function(err){
                                    if(err)
                                    {
                                        return endResonse('1','获取记录失败',res);;
                                    }
                                    else
                                    {
                                        connection.release();
                                        var ret = {'list':result,'type':context.param.type,'error':0,'msg':'记录列表返回成功',ph:context.userinfo.ph,integral:context.userinfo.integral,scid:context.userinfo.sid};
                                        return returnjsondata(res,ret);
                                    }
                            });
                        }
            }
        });
    });
}

/**
 * 积分兑换
 * @param context
 * @param res
 */
user.doExchangeIntegral = function(context,res){
    async.waterfall([
        function(callback){
            getConnection(context,callback);
        },
        function(callback){
            //判断商品库存
            context.conn.query('select title,fvalue,cardid,price,gtype,unit,num,sale from mk_integral_goods where gid = ? and status = 1 limit 1',[context.param.gid],function(err,rows){
                if(err)
                {
                        logger.getDebugLogger().error("数据库连接异常：" + err);
                        endResonse('500', '内部错误', res);
                        connection.release();
                        return;
                }
                else
                {
                    if(rows && rows.length > 0)
                    {
                        if(rows[0].gtype == context.param.type)
                        {
                            if((rows[0].num - rows[0].sale) > 0)
                            {
                                context.unit = rows[0].unit;
                                callback(null,rows);
                            }
                            else
                            {
                                //库存不足
                                context.conn.release();
                                endResonse('263', '对不起该商品库存不足', res);
                                return;
                            }
                        }
                        else
                        {
                            context.conn.release();
                            endResonse('264', '兑换失败请重试', res);
                            return;
                        }
                    }
                    else
                    {
                        //没有库存
                        context.conn.release();
                        endResonse('263', '对不起，未找到该商品', res);
                        return;
                    }
                }
            });
        },
        function(product,callback)
        {
            if(product.price > context.userinfo.integral)
            {
                context.conn.release();
                endResonse('266', '对不起，您的金米不够', res);
                return;
            }
            else
            {
                //查看用户今天是否还可以兑换某个商品
                callback(null);
            }
        },
        function(callback)
        {
            if(context.param.type == 2)
            {
                context.conn.query('SELECT * FROM mk_goods_list WHERE gid= ? AND status=0 ORDER BY expire ASC LIMIT 1',[context.param.gid],function(err,rows)
                {
                    if(err)
                    {
                        logger.getDebugLogger().error("数据库连接异常：" + err);
                        endResonse('500', '内部错误', res);
                        context.conn.release();
                        return;
                    }
                    else
                    {
                        var key = 'STR_WIFI_USER_EXCHANGE_GOODS_' + new moment().format('YYYY-MM-DD') + '_' + context.userinfo.uid + '_' +context.userinfo.gid;
                        redisClient.get(key,function(err,val){
                            if(err)
                            {
                                logger.getDebugLogger().error("redis数据获取异常" + err);
                            }
                            else
                            {
                                if(val > context.unit)
                                {
                                    context.conn.release();
                                    endResonse('265', '对不起，您今天兑换该商品的机会已经用完', res);
                                    return;
                                }
                                else
                                {
                                    callback(null);
                                }
                            }
                        });
                    }
                });
            }
        },
        function(callback)
        {
            //判断用户是否已经兑奖过
            var time = new moment(new moment().format('YYYY-MM-DD')).millisecond();
            context.conn.query('select count(*) count from mk_integral_order where ( androidid = ? or imei = ?) and addtime >= ? limit 1',[context.param.androidid,context.param.imei,time],function(err,rows){
                if(err)
                {
                    logger.getDebugLogger().error("数据库连接异常：" + err);
                    endResonse('500', '内部错误', res);
                    context.conn.release();
                    return;
                }
                else
                {
                    if(rows && rows.length > 0)
                    {
                        context.conn.release();
                        endResonse('275', '当前以兑换结束，请明天再来', res);
                        return;
                    }
                    else
                    {
                        callback(null);
                    }
                }
            });
        },
        function(callback)
        {
        }
    ])
}

/**
 *
 * @param context
 * @param res
 */
user.newIntegralArea = function(context,res){
    async.waterfall([
        function(callback){
            getConnection(context,callback)
        },
        function(callback)
        {
            context.conn.query('select pic from mk_exchange_banner',function(err,rows)
            {
                if(err)
                {
                    logger.getDebugLogger().error("数据库连接异常：" + err);
                    endResonse('500', '内部错误', res);
                    if(context.conn)
                    {
                        context.conn.release();
                    }
                    return;
                }
                else
                {
                    if(rows && rows.length)
                    {
                        context.pic = getImgUrl(rows[0].pic);
                    }
                    else
                    {
                        context.pic = '';
                    }
                    callback(null);
                }
            });
        },
        function(callback) {
            var param = [Math.floor(new Date().getTime()/1000),context.offset,context.limit];
            context.conn.query('SELECT aid,pic,show_descs from mk_integral_activities where endtime > ? and status=1 order by sort desc  limit  ?, ? ',param,function(err,rows){
                if(err)
                {
                    logger.getDebugLogger().error("数据库连接异常：" + err);
                    endResonse('500', '内部错误', res);
                    if(context.conn)
                    {
                        context.conn.release();
                    }
                    return;
                }
                else
                {
                    if(rows && rows.length > 0)
                    {
                        for(var i = 0;i < rows.length; i++)
                        {
                            rows[i].pic = getImgUrl(rows[i].pic);
                        }
                        var list = new Array();
                        list.push({aid:0,pic:context.pic,show_descs:2});
                        list.push(rows[0]);

                        var data = {};
                        data.desc = '亲，所有商品都在等你兑换哦';
                        data.list = list;

                        data.error = 0;
                        data.lt = new Date().getTime();
                        //判断用户是否已登录
                        if(context.userinfo.uid && context.userinfo.uid > 0)
                        {
                            data.ph = context.userinfo.ph;
                            data.integral = context.userinfo.integral;
                            data.scid = context.userinfo.scid;
                        }
                        if(context.conn)
                        {
                            context.conn.release();
                        }
                        returnjsondata(res,data);
                    }
                    return;
                }
            });
        }
    ])
}

/**
 * 图片url转换
 * @param furl
 */
var getImgUrl = function(furl)
{
    if(furl.indexOf('http://') > 0)
    {
        return furl
    }
    else
    {
        return IMG_FILE_SERVER + furl;
    }
}

module.exports = user;