/**
 * Created by hadoop on 2015/6/10.
 */
var async = require('async');
var http = require('http');
var moment = require('moment')

var querystring = require('querystring');
var dbpool = require('../core/dbutil');
var config = require('../core/config')
var logger = require('../core/logger')
var resUtils = require('../core/resUtils');
var timeUtils = require('../core/timeUtils');
var crypto = require('../core/cryptoUtils');
var redisClient = require('../core/redisClient');
var common = require('./common');
var loginsign = {};

var UC_PID = config.UC_PID;
var UC_SECRET = config.UC_SECRET;
var USER_VCODE_RATE_PREFIX = 'STR_WIFI_VCODE_RATE_';
var USER_VCODE_DAY_PREFIX = 'STR_SCHOOL_WIFI_VCODE_';
var CRYPTO_SALT = "www.anzhuoshangdian.com";
var IMG_FILE_SERVER = 'http://imgs.anzhuoshangdian.com';

var PLATFORM = 1;
var BUSI_SKIP = new Error();
var BUSI_EXCEPTION = new Error();
var BREAK_FLAG = new Error();

var endResonse = resUtils.endResonse;
var returnjsondata = resUtils.returnjsondata;


loginsign.signPage = function(context,res){
        var ret = {};
        var data ={};


        dbpool.getConnection(function (err, connection) {
            if (err) {
                logger.getDebugLogger().error("" + err);
                endResonse('500', '111111', res);
                if(connection)
                {
                    connection.release();
                }
                return;
            }

            connection.query('select unit times,integral from mk_sign_rule where type = 2 and platform = ?',[context.platform], function (err, rows) {
                        if (err) {
                            logger.getDebugLogger().error("查询数据库错误" + err);
                            endResonse('500', '22222222', res);
                            if(connection)
                            {
                                connection.release();
                            }
                            return;
                        } else {
                            ret.accumulate = rows;
                            connection.query('select integral from mk_sign_rule where type = 1 and platform = ? limit 1 ',[context.platform],function (err, rows) {
                                if (err) {
                                        logger.getDebugLogger().error("查询数据库错误" + err);
                                        endResonse('500', '333333333', res);
                                        if(connection)
                                        {
                                            connection.release();
                                        }
                                        return callback(BREAK_FLAG, '');
                                } else {
                                    if(rows && rows.length > 0)
                                    {
                                    ret.everytime = rows[0].integral;
                                    connection.query('select sum(integral) total from mk_sign_record where uid = ? and platform = ? limit 1', [context.userinfo.uid, context.platform], function (err, rows) {
                                        if (err) {
                                                logger.getDebugLogger().error("查询数据库错误" + err);
                                                endResonse('500', '4444444444', res);
                                            if(connection)
                                            {
                                                connection.release();
                                            }
                                                return;
                                        } else {
                                            data.total = rows[0].total;
                                            var start = moment(new Date() - 86400000).format("YYYY-MM-DD") + ' 00:00:00';
                                            var end = moment(new Date()).format("YYYY-MM-DD") + ' 23:59:59';
                                            var param = [context.userinfo.uid, start, end, context.platform];
                                            connection.query('select continued,time from mk_sign_record where uid=? and time >= ? and time <= ? and platform = ? order by time desc limit 1 ', param, function (err, rows) {
                                                if (err) {
                                                        logger.getDebugLogger().error("查询数据库错误" + err);
                                                        endResonse('500', '555555555555', res);
                                                    if(connection)
                                                    {
                                                        connection.release();
                                                    }
                                                        return;
                                                } else {

                                                    if (rows.length !== 0) {
                                                        data.continued = rows[0].continued;
                                                        logger.getDebugLogger().debug('time1'+ new moment(rows[0].time).format('YYYY-MM-DD'));
                                                        logger.getDebugLogger().debug('time2'+ new moment().format('YYYY-MM-DD'));
                                                        if (new moment(rows[0].time).format('YYYY-MM-DD') == new moment().format('YYYY-MM-DD')) {
                                                            ret.signed = 'true';
                                                        }
                                                        else {
                                                            ret.signed = 'false';
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ret.signed = 'false';
                                                        data.continued = 0;
                                                    }

                                                    connection.query('select integral from mk_member where uid = ? and platform = ? limit 1', [context.userinfo.uid, context.platform], function (err, rows) {
                                                        if (err) {
                                                                logger.getDebugLogger().error("查询数据失败" + err);
                                                                endResonse('500', '查询数据失败', res);
                                                            if(connection)
                                                            {
                                                                connection.release();
                                                            }
                                                                return;
                                                        }
                                                        else {
                                                            if (rows && rows.length > 0) {
                                                                ret.balance = rows[0].integral;
                                                            }
                                                            else {
                                                                ret.balance = 0;
                                                            }
                                                            common.isStartGame(context, connection, res, function () {
                                                                ret.isstartgame = context.isstartgame;
                                                                ret.data = data;
                                                                returnjsondata(res, ret);
                                                                if(connection)
                                                                {
                                                                    connection.release();
                                                                }
                                                                return;
                                                            });
                                                            return;
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            }
                                });
                            }
                    });
                });
}

loginsign.signup = function(context,res){
    var continued = 0;
    logger.getDebugLogger().debug("开始签到");
    dbpool.getConnection(function (err, connection) {
        if (err) {
            logger.getDebugLogger().error("获取数据库连接失败" + err);
            endResonse('500', '获取数据库连接失败', res);
            if(connection)
            {
                connection.release();
            }
            return;
        }

        connection.query('select id,type,integral,unit from mk_sign_rule where platform = ? order by id',[context.userinfo.platform],function (err, rows) {
            if (err) {
                    logger.getDebugLogger().error("数据库查询失败" + err);
                    endResonse('500', '数据库查询失败', res);
                    if(connection)
                    {
                        connection.release();
                    }
                    return;
            } else {
                        if(rows.length > 0)
                        {
                            logger.getDebugLogger().debug('rules:' + rows.length);
                            async.eachSeries(rows,function(rule,callback){
                                logger.getDebugLogger().debug('rule.type:' + rule.type);
                                if(rule.type == 1)
                                {
                                    var start = moment().format('YYYY-MM-DD') + ' 00:00:00';
                                    var end = moment().format('YYYY-MM-DD') + ' 23:59:59';
                                    var param = [start,end,context.userinfo.uid,context.userinfo.platform];
                                    logger.getDebugLogger().debug('select * from mk_sign_record where time >= ? and time <= ? and uid = ? and platform = ?:'+param);
                                    connection.query('select * from mk_sign_record where time >= ? and time <= ? and uid = ? and platform = ?',param, function (err, rows) {
                                        if (err) {
                                            logger.getDebugLogger().error("12121212" + err);
                                            endResonse('500', '12121212', res);
                                            if(connection)
                                            {
                                                connection.release();
                                            }
                                            return;
                                        }
                                        else
                                        {
                                            logger.getDebugLogger().debug('rows:' + rows.length);

                                            if(rows.length > 0)
                                            {
                                                if(rule.type == 1)
                                                {
                                                    logger.getDebugLogger().debug("今日已签到");
                                                    endResonse(1,'今日已签到',res);
                                                    if(connection)
                                                    {
                                                        connection.release();
                                                    }
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                logger.getDebugLogger().debug("今日未签到");
                                                //签到
                                                //昨日是否有登录记录
                                                var start = moment((new Date().getTime() - 86400000)).format('YYYY-MM-DD') + ' 00:00:00';
                                                var end =  moment((new Date().getTime() - 86400000)).format('YYYY-MM-DD') + ' 23:59:59';
                                                param = [start,end,context.userinfo.uid,context.userinfo.platform];
                                                logger.getDebugLogger().debug("select * from mk_sign_record where time >= ? and time <= ? and uid = ? and platform = ?:" + param);
                                                connection.query('select * from mk_sign_record where time >= ? and time <= ? and uid = ? and platform = ? ',param, function (err, rows) {
                                                    if (err) {
                                                        logger.getDebugLogger().error("查询数据库失败" + err);
                                                        endResonse('500', '查询数据库失败', res);
                                                        if(connection)
                                                        {
                                                            connection.release();
                                                        }
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        //
                                                        if(rows.length > 0)
                                                        {
                                                            if(rows[0].continued == 25)
                                                            {
                                                                context.continued = 1;
                                                            }
                                                            else
                                                            {
                                                                context.continued = rows[0].continued + 1;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            context.continued = 1;
                                                        }

                                                        //
                                                        connection.beginTransaction(function (err) {
                                                            if (err) {
                                                                logger.getDebugLogger().error("事务开启失败" + err);
                                                                endResonse('500', '事务开启失败', res);
                                                                connection.rollback(function () {
                                                                    logger.getDebugLogger().error("开启事务失败,事务回滚 " + err);
                                                                    endResonse('500', '开启事务失败', res);
                                                                    if(connection)
                                                                    {
                                                                        connection.release();
                                                                    }
                                                                });
                                                                return;
                                                            }

                                                            param = [context.userinfo.uid,rule.integral,rule.id,context.continued,new moment().format('YYYY-MM-DD HH:mm:ss'),context.userinfo.platform];
                                                            logger.getDebugLogger().debug("insert into mk_sign_record (uid,integral,ruleid,continued,time,platform) values(?,?,?,?,?,?)" + param);
                                                            connection.query('insert into mk_sign_record (uid,integral,ruleid,continued,time,platform) values(?,?,?,?,?,?)',param, function (err,rows) {
                                                                if (err) {
                                                                    connection.rollback(function () {
                                                                        logger.getDebugLogger().error("插入数据库失败，事务回滚." + err);
                                                                        endResonse('500', '插入数据库失败', res);
                                                                        if(connection)
                                                                        {
                                                                            connection.release();
                                                                        }
                                                                    });
                                                                    return;
                                                                }
                                                                else
                                                                {
                                                                    param = [rule.integral,context.userinfo.uid,context.userinfo.platform];
                                                                    logger.getDebugLogger().debug("update mk_member set integral =  integral + ? where uid = ? and platform = ?:" + param);
                                                                    connection.query("update mk_member set integral =  integral + ? where uid = ? and platform = ? ",param, function (err,rows) {
                                                                        if (err) {
                                                                            connection.rollback(function () {
                                                                                logger.getDebugLogger().error("更新数据失败事务回滚！" + err);
                                                                                endResonse('500', '23232323', res);
                                                                                if(connection)
                                                                                {
                                                                                    connection.release();
                                                                                }
                                                                                return;
                                                                            });
                                                                        }
                                                                        else
                                                                        {
                                                                            var addtime = Math.floor(new Date().getTime()/1000);
                                                                            var title = '每日签到获取金米';
                                                                            var integral = rule.integral;
                                                                            var inte_type = 0;
                                                                            var taskid = 1003;
                                                                            var tasktype = 2;
                                                                            var param = [context.userinfo.uid,addtime,title,integral,inte_type,taskid,tasktype,context.userinfo.platform];
                                                                            logger.getDebugLogger().error("insert into mk_integral (uid,addtime,title,integral,inte_type,taskid,tasktype,platform) values (?,?,?,?,?,?,?,?)" + param);
                                                                            connection.query('insert into mk_integral (uid,addtime,title,integral,inte_type,taskid,tasktype,platform) values (?,?,?,?,?,?,?,?) ',param, function (err,rows) {
                                                                                if (err) {
                                                                                    connection.rollback(function () {
                                                                                        logger.getDebugLogger().error("插入数据库失败，事务回滚" + err);
                                                                                        endResonse('500', '4545454545', res);
                                                                                        if(connection)
                                                                                        {
                                                                                            connection.release();
                                                                                        }
                                                                                        return;
                                                                                    });
                                                                                }
                                                                                else
                                                                                {
                                                                                    //每日签到获取成功
                                                                                    callback();
                                                                                }
                                                                            });
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        });
                                                    }
                                                });
                                            }
                                        }});
                                }
                                else
                                {
                                    //累计签到
                                    if(rule.unit == context.continued)
                                    {
                                        var time = new moment().format('YYYY-MM-DD HH:mm:ss');
                                        param = [context.userinfo.uid,rule.integral,rule.id,context.continued,time,context.userinfo.platform];
                                        connection.query('insert into mk_sign_record (uid,integral,ruleid,continued,time,platform) values(?,?,?,?,?,?) ',param, function (err,rows) {
                                            if (err) {
                                                connection.rollback(function () {
                                                    logger.getDebugLogger().error("插入数据失败，事务回滚" + err);
                                                    endResonse('500', '12121212', res);
                                                    if(connection)
                                                    {
                                                        connection.release();
                                                    }
                                                    return;
                                                });
                                            }
                                            else
                                            {
                                                param = [rule.integral,context.userinfo.uid,context.userinfo.platform];
                                                connection.query('update mk_member set integral =  integral + ? where uid = ? and platform = ?',param, function (err,rows) {
                                                    if (err) {
                                                        connection.rollback(function () {
                                                            logger.getDebugLogger().error("更新数据失败事务回滚" + err);
                                                            endResonse('500', '232345', res);
                                                            if(connection)
                                                            {
                                                                connection.release();
                                                            }
                                                            return;
                                                        });
                                                    }
                                                    else
                                                    {
                                                        var addtime = Math.floor(new Date().getTime()/1000);
                                                        var title = '每日签到获取金米';
                                                        var integral = rule.integral;
                                                        var inte_type = 0;
                                                        var taskid = 1003;
                                                        var tasktype = 2;
                                                        param = [context.userinfo.uid,addtime,title,integral,inte_type,taskid,tasktype,context.userinfo.platform];
                                                        connection.query('insert into mk_integral (uid,addtime,title,integral,inte_type,taskid,tasktype,platform) values (?,?,?,?,?,?,?,?) ',param, function (err,rows) {
                                                            if (err) {
                                                                connection.rollback(function () {
                                                                    logger.getDebugLogger().error("插入数据失败，事务回滚" + err);
                                                                    endResonse('500', '784512', res);
                                                                    if(connection)
                                                                    {
                                                                        connection.release();
                                                                    }
                                                                    return;
                                                                });
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    callback();
                                }
                            },function(err){
                                if(err)
                                {
                                    if(connection)
                                    {
                                        connection.rollback(function(){
                                            logger.getDebugLogger().debug("事务回滚" + err);
                                            connection.release();
                                        })
                                    }
                                }
                                else
                                {
                                    if (connection) {
                                        connection.commit(function (err) {
                                            if (err) {
                                                connection.rollback(function () {
                                                    logger.getDebugLogger().debug("事务回滚" + err);
                                                    connection.release();
                                                });
                                            }
                                            else
                                            {
                                                if(connection)
                                                {
                                                    connection.release();
                                                }
                                                logger.getDebugLogger().debug("事务提交" + err);
                                            }
                                            loginsign.signPage(context,res);
                                        });
                                    }
                                    else
                                    {
                                        if(connection)
                                        {
                                            connection.release();
                                        }
                                        loginsign.signPage(context,res);
                                    }
                                }
                            });
                        }
                        else
                        {
                            if(connection)
                            {
                                connection.release();
                            }
                            endResonse('1', '没有匹配规则', res);
                            return;
                        }
            }
        });
    });
}

module.exports = loginsign;